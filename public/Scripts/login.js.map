{
  "version": 3,
  "sources": ["../../private/conf.js", "../../private/login.js"],
  "sourcesContent": ["const NC_URL = \"https://nextcloud.clarusch.de\";\n\nexport default NC_URL;\n", "import NC_URL from \"./conf\";\n\nexport default () => ({\n    initNextcloudLogin() {\n        const req = new XMLHttpRequest();\n        req.onreadystatechange = function () {\n            if (this.readyState == 4 && this.status == 200) {\n                console.log(req.response)\n                window.nextcloudLoginData = JSON.parse(req.response);\n            }\n        }\n        req.open(\"POST\", NC_URL + \"/index.php/login/v2\");\n        req.send();\n    },\n    openNextcloudLogin() {\n        window.open(window.nextcloudLoginData.login, \"_blank\");\n        let res = pollNextcloudLoginEndpoint(window.nextcloudLoginData.poll.endpoint, window.nextcloudLoginData.poll.token)\n            .then(function () {\n                console.log(res)// Polling done, now do something else!\n                console.log(\"sucess?\")\n            }).catch(function () {\n                console.log(\"i don't know\")\n                // Polling timed out, handle the error!\n            });\n    }\n})\n\nfunction pollNextcloudLoginEndpoint(endpoint, token, timeout = 10000, interval = 100) {\n    var endTime = Number(new Date()) + timeout;\n\n    var checkCondition = function (resolve, reject) {\n        var result = postToNextcloudLoginEndpoint(endpoint, token);\n        if (result) {\n            resolve(result);\n        }\n        else if (Number(new Date()) < endTime) {\n            setTimeout(checkCondition, interval, resolve, reject);\n        }\n        else {\n            reject(new Error('timed out for ' + postToNextcloudLoginEndpoint + ': ' + arguments));\n        }\n    };\n\n    return new Promise(checkCondition);\n}\n\nfunction postToNextcloudLoginEndpoint(endpoint, token) {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n            console.log(\"ready and 200\")\n            return JSON.parse(req.response);\n        } else {\n            console.log(\"NC not rdy\")\n        }\n    }\n    req.open(\"POST\", endpoint);\n    req.setRequestHeader(\"token\", token);\n    let params = \"token=\" + token;\n    req.send(params);\n}"],
  "mappings": "MAAA,IAAMA,EAAS,gCAERC,EAAQD,ECAf,IAAOE,EAAQ,KAAO,CAClB,oBAAqB,CACjB,IAAMC,EAAM,IAAI,eAChBA,EAAI,mBAAqB,UAAY,CAC7B,KAAK,YAAc,GAAK,KAAK,QAAU,MACvC,QAAQ,IAAIA,EAAI,QAAQ,EACxB,OAAO,mBAAqB,KAAK,MAAMA,EAAI,QAAQ,EAE3D,EACAA,EAAI,KAAK,OAAQC,EAAS,qBAAqB,EAC/CD,EAAI,KAAK,CACb,EACA,oBAAqB,CACjB,OAAO,KAAK,OAAO,mBAAmB,MAAO,QAAQ,EACrD,IAAIE,EAAMC,EAA2B,OAAO,mBAAmB,KAAK,SAAU,OAAO,mBAAmB,KAAK,KAAK,EAC7G,KAAK,UAAY,CACd,QAAQ,IAAID,CAAG,EACf,QAAQ,IAAI,SAAS,CACzB,CAAC,EAAE,MAAM,UAAY,CACjB,QAAQ,IAAI,cAAc,CAE9B,CAAC,CACT,CACJ,GAEA,SAASC,EAA2BC,EAAUC,EAAOC,EAAU,IAAOC,EAAW,IAAK,CAClF,IAAIC,EAAU,OAAO,IAAI,IAAM,EAAIF,EAE/BG,EAAiB,SAAUC,EAASC,EAAQ,CAC5C,IAAIC,EAASC,EAA6BT,EAAUC,CAAK,EACrDO,EACAF,EAAQE,CAAM,EAET,OAAO,IAAI,IAAM,EAAIJ,EAC1B,WAAWC,EAAgBF,EAAUG,EAASC,CAAM,EAGpDA,EAAO,IAAI,MAAM,iBAAmBE,EAA+B,KAAO,SAAS,CAAC,CAE5F,EAEA,OAAO,IAAI,QAAQJ,CAAc,CACrC,CAEA,SAASI,EAA6BT,EAAUC,EAAO,CACnD,IAAML,EAAM,IAAI,eAChBA,EAAI,mBAAqB,UAAY,CACjC,GAAI,KAAK,YAAc,GAAK,KAAK,QAAU,IACvC,eAAQ,IAAI,eAAe,EACpB,KAAK,MAAMA,EAAI,QAAQ,EAE9B,QAAQ,IAAI,YAAY,CAEhC,EACAA,EAAI,KAAK,OAAQI,CAAQ,EACzBJ,EAAI,iBAAiB,QAASK,CAAK,EACnC,IAAIS,EAAS,SAAWT,EACxBL,EAAI,KAAKc,CAAM,CACnB",
  "names": ["NC_URL", "conf_default", "login_default", "req", "conf_default", "res", "pollNextcloudLoginEndpoint", "endpoint", "token", "timeout", "interval", "endTime", "checkCondition", "resolve", "reject", "result", "postToNextcloudLoginEndpoint", "params"]
}
